<?php

/**
 * This module adds "protect by path" functionality to simplesamlphp_auth
 *
 * For now, you need to hardcode your whitelisted paths
 * TODO: Create an admin UI for adding your whietlisted paths
 *
 * Note: This module currently works only on nodes.
 * For Views, you can use Views access control to set the
 * 'access cwl protected content'permission.
 *
 * Maintain your Whitelists in the following two functions:
 * ubc_saml_auth_getCWLWhitelist() for a list of whitelisted paths
 * ubc_saml_auth_pathIsInWildcardWhitelist() for a list of whitelisted wildcard rules
 */

define('UBC_SAML_PERMISSION', 'access cwl protected content');

/**
 * Implements
 */
function ubc_saml_auth_admin() {
  $form = array();
  $form['ubc_saml_auth_protected_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Protected paths'),
    '#default_value' => variable_get('ubc_saml_auth_protected_path', ''),
    '#description' => t("The list of paths aliases that should be CWL protected separated by commas."),
    '#required' => FALSE,
  );
  $form['ubc_saml_auth_wildcard'] = array(
    '#type' => 'textfield',
    '#title' => t('Protected paths'),
    '#default_value' => variable_get('ubc_saml_auth_wildcard', ''),
    '#description' => t("The list of wildcard aliases, which end with \"/*\" separated by commas."),
    '#required' => FALSE,
  );
  return system_settings_form($form);
}

/**
 *  Implements hook_menu
 */
function ubc_saml_auth_menu() {
  $items = array();
  $items['admin/config/content/ubc_saml_auth'] = array(
    'title' => 'UBC SAML Auth settings',
    'description' => 'Description of your UBC SAML Auth settings page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ubc_saml_auth_admin'),
    'access arguments' => array('administer ubc_saml_auth settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * List paths aliases that should be CWL protected
 */
function ubc_saml_auth_getCWLWhitelist() {

  $protected_list = explode(",", variable_get('ubc_saml_auth_protected_path', ''));
  return $protected_list;
}

/**
 * List wildcard aliases, which end with "/*"
 *
 * @param $path - A path alias (not a system path)
 */
function ubc_saml_auth_pathIsInWildcardWhitelist($path) {

  $protected_list = explode(",", variable_get('ubc_saml_auth_wildcard', ''));
  $protected_list[] = 'cwl/*';

  foreach($protected_list as $expression) {

    $length = strlen($expression) - strlen('/*');
    $path_match = substr($path, 0, $length);

    if ($path == substr($expression, 0, -2)) {
      return false;
    }
    elseif ($path_match == substr($expression, 0, -2)) {
      return true;
    }
  }
  return false;
}

/**
 * Implements hook_permission
 */
function ubc_saml_auth_permission() {

  return array(
    UBC_SAML_PERMISSION => array(
      'title' => t('Access CWL Protected Content'),
    )
  );
}

/**
 * Implements hook_node_access
 */
function ubc_saml_auth_node_access($node, $op, $account) {

  if(is_object($node) === FALSE) {
    return;
  }

  $path = drupal_get_path_alias('node/'.$node->nid);
  $protected_list = ubc_saml_auth_getCWLWhitelist();

  if (!user_access(UBC_SAML_PERMISSION)) {

    $UBC_PSH_BRANCH = getenv('PLATFORM_BRANCH');

    global $base_url; 
    $rtn_url = $base_url.'/'.$path;

    if ((in_array($path, $protected_list)) || (ubc_saml_auth_pathIsInWildcardWhitelist($path))) {

      $loggedIn = user_is_logged_in();
      if($loggedIn) {
        return NODE_ACCESS_DENY;
      }

      if($UBC_PSH_BRANCH == 'master') {
        if($_SERVER['SCRIPT_NAME'] != '/cron.php') {
          watchdog('UBC_SAML_AUTH', 'drupal_goto: '.$_SERVER['SCRIPT_NAME']);
          watchdog('UBC_SAML_AUTH', 'OP: '.$op);
          drupal_goto('saml_login', array('query' => array('ReturnTo' => $rtn_url)));
        }
      }
      else {
        watchdog('UBC_SAML_AUTH', 'Whitelist Path: '.$rtn_url);
      }
    }
  }
}


/*
 * Create a CWL Login Button with a dynamic destination variable
 */

function ubc_saml_auth_block_info() {
  $blocks['ubc_saml_auth_loginButton'] = array(
    'info' => t('CWL Login Button with dynamic destination argument'),
    'cache' => DRUPAL_NO_CACHE,  
  );

  return $blocks;
}

function ubc_saml_auth_block_view($delta = '') {
  switch($delta) {
    case 'ubc_saml_auth_loginButton':
      $block['subject'] = t('CWL Login Button with dynamic destination argument');
      $block['content'] = ubc_saml_auth_getLoginButton();
      break;
  }
  return $block; 
}

function ubc_saml_auth_getLoginButton() {

  $destination = request_path();
  $destination = filter_xss($destination);

  $source_dest = drupal_lookup_path('source', $destination);
  if($source_dest === FALSE) {
    $source_dest = "home";
  }

  $cwl_login_path = "/saml_login?destination=".$source_dest;

  return '<div class="cwl-login"><a href="'.$cwl_login_path.'"><span>CWL</span> Login</a></div>';
}

